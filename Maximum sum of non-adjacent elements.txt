You are given an array/list of ‘N’ integers. You are supposed to return the maximum sum of the subsequence with the constraint that no two elements are adjacent in the given array/list.
2
3
1 2 4
4
2 1 4 9
Sample Output 1:
5
11

//memo
int solve(int n, vector<int> & nums, vector<int> &dp){
    if(n == 0) return nums[0];
    if(n < 0) return 0;
    if(dp[n] != -1) return dp[n];
    return dp[n] = max(nums[n]+solve(n-2,nums,dp), solve(n-1,nums,dp));
}
//tabo
int solve(vector<int> &nums){
    vector<int> dp(nums.size());
    dp[0] = 0;
    dp[1] = nums[0];
    for(int i = 2; i <= nums.size(); i++){
        dp[i] = max(nums[i-1]+dp[i-2], dp[i-1]);
    }
    return dp[nums.size()];
}
int maximumNonAdjacentSum(vector<int> &nums){
    return solve(nums);
}