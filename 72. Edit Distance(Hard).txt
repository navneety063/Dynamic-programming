Given two strings word1 and word2, return the minimum number of operations required to convert word1 to word2.

You have the following three operations permitted on a word:

Insert a character
Delete a character
Replace a character
 

Example 1:

Input: word1 = "horse", word2 = "ros"
Output: 3
Explanation: 
horse -> rorse (replace 'h' with 'r')
rorse -> rose (remove 'r')
rose -> ros (remove 'e')

class Solution {
public:
    vector<vector<int>> dp;
    int get(string &a, string &b, int i, int j) {
    if (i < 0 or j < 0) return max(i, j) + 1;
    if (dp[i][j] != -1) return dp[i][j];
    if (a[i] != b[j])
        return dp[i][j] = 1 + min({get(a, b, i - 1, j), get(a, b, i, j - 1), get(a, b, i - 1, j - 1)});
    return dp[i][j] = get(a, b, i - 1, j - 1);
}
    int minDistance(string a, string b) {
        dp.assign(a.size(), vector<int>(b.size(), -1));
        return get(a, b, a.size() - 1, b.size() - 1);
    }
};